// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// allChildrenCPP
std::vector<std::vector<int>> allChildrenCPP(const arma::Mat<int> E);
RcppExport SEXP _scistreer_allChildrenCPP(SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type E(ESEXP);
    rcpp_result_gen = Rcpp::wrap(allChildrenCPP(E));
    return rcpp_result_gen;
END_RCPP
}
// reorder_rows
arma::Mat<int> reorder_rows(arma::Mat<int> x, arma::Col<int> y);
RcppExport SEXP _scistreer_reorder_rows(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(reorder_rows(x, y));
    return rcpp_result_gen;
END_RCPP
}
// reorderRcpp
arma::Mat<int> reorderRcpp(arma::Mat<int> E);
RcppExport SEXP _scistreer_reorderRcpp(SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type E(ESEXP);
    rcpp_result_gen = Rcpp::wrap(reorderRcpp(E));
    return rcpp_result_gen;
END_RCPP
}
// nnin_cpp
std::vector<arma::Mat<int>> nnin_cpp(const arma::Mat<int> E, const int n);
RcppExport SEXP _scistreer_nnin_cpp(SEXP ESEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type E(ESEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nnin_cpp(E, n));
    return rcpp_result_gen;
END_RCPP
}
// nnin_score
arma::vec nnin_score(const arma::Mat<int> E, const int n, arma::mat logQ, double L_0);
RcppExport SEXP _scistreer_nnin_score(SEXP ESEXP, SEXP nSEXP, SEXP logQSEXP, SEXP L_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type E(ESEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logQ(logQSEXP);
    Rcpp::traits::input_parameter< double >::type L_0(L_0SEXP);
    rcpp_result_gen = Rcpp::wrap(nnin_score(E, n, logQ, L_0));
    return rcpp_result_gen;
END_RCPP
}
// CgetQ
arma::mat CgetQ(arma::mat logQ, std::vector<std::vector<int>> children_dict, arma::Col<int> node_order);
RcppExport SEXP _scistreer_CgetQ(SEXP logQSEXP, SEXP children_dictSEXP, SEXP node_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type logQ(logQSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type children_dict(children_dictSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type node_order(node_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(CgetQ(logQ, children_dict, node_order));
    return rcpp_result_gen;
END_RCPP
}
// get_logQ
arma::mat get_logQ(const arma::Mat<int> E, const arma::mat P);
RcppExport SEXP _scistreer_get_logQ(SEXP ESEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(get_logQ(E, P));
    return rcpp_result_gen;
END_RCPP
}
// score_tree_cpp
double score_tree_cpp(const arma::Mat<int> E, const arma::mat P);
RcppExport SEXP _scistreer_score_tree_cpp(SEXP ESEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(score_tree_cpp(E, P));
    return rcpp_result_gen;
END_RCPP
}
// get_score
double get_score(const arma::mat logQ, const arma::mat P);
RcppExport SEXP _scistreer_get_score(SEXP logQSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type logQ(logQSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(get_score(logQ, P));
    return rcpp_result_gen;
END_RCPP
}
// nni_cpp_parallel_new
NumericVector nni_cpp_parallel_new(const List tree, arma::mat P);
RcppExport SEXP _scistreer_nni_cpp_parallel_new(SEXP treeSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(nni_cpp_parallel_new(tree, P));
    return rcpp_result_gen;
END_RCPP
}
// nni_cpp_parallel
NumericVector nni_cpp_parallel(const List tree, arma::mat P);
RcppExport SEXP _scistreer_nni_cpp_parallel(SEXP treeSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(nni_cpp_parallel(tree, P));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scistreer_allChildrenCPP", (DL_FUNC) &_scistreer_allChildrenCPP, 1},
    {"_scistreer_reorder_rows", (DL_FUNC) &_scistreer_reorder_rows, 2},
    {"_scistreer_reorderRcpp", (DL_FUNC) &_scistreer_reorderRcpp, 1},
    {"_scistreer_nnin_cpp", (DL_FUNC) &_scistreer_nnin_cpp, 2},
    {"_scistreer_nnin_score", (DL_FUNC) &_scistreer_nnin_score, 4},
    {"_scistreer_CgetQ", (DL_FUNC) &_scistreer_CgetQ, 3},
    {"_scistreer_get_logQ", (DL_FUNC) &_scistreer_get_logQ, 2},
    {"_scistreer_score_tree_cpp", (DL_FUNC) &_scistreer_score_tree_cpp, 2},
    {"_scistreer_get_score", (DL_FUNC) &_scistreer_get_score, 2},
    {"_scistreer_nni_cpp_parallel_new", (DL_FUNC) &_scistreer_nni_cpp_parallel_new, 2},
    {"_scistreer_nni_cpp_parallel", (DL_FUNC) &_scistreer_nni_cpp_parallel, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_scistreer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
